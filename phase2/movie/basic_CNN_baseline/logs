69
parser.add_argument('--filter_sizes', type=str, default="3,4,5",help="Comma-separated filter sizes (default: '3,4,5')")
   parser.add_argument('--embedding_dim', type=int, default=100, help="Dimensionality of character embedding (default: 128)")
   parser.add_argument('--num_filters', type=int, default=128, help="Number of filters per filter size (default: 128)")
   parser.add_argument('--dropout_keep_prob', type=float, default=0.1, help="Dropout keep probability (default: 0.5)")
   parser.add_argument('--l2_reg_lambda', type=float, default=0.001, help="L2 regularizaion lambda (default: 0.0)")
   parser.add_argument('--sequence_length', type=int, default=18, help="sequence_length (default: 18)")

   # Training parameters
   parser.add_argument('--batch_size', type=int, default=1024, help="Batch Size (default: 64)")
   parser.add_argument('--num_epochs', type=int, default=3, help="Number of training epochs (default: 200)")
   parser.add_argument('--evaluate_every', type=int, default=500, help="Evaluate model on dev set after this many steps (default: 100)")
   parser.add_argument('--checkpoint_every', type=int, default=20, help="Save model after this many steps (default: 100)")

   70
   parser.add_argument('--filter_sizes', type=str, default="3,4,5",help="Comma-separated filter sizes (default: '3,4,5')")
       parser.add_argument('--embedding_dim', type=int, default=100, help="Dimensionality of character embedding (default: 128)")
       parser.add_argument('--num_filters', type=int, default=128, help="Number of filters per filter size (default: 128)")
       parser.add_argument('--dropout_keep_prob', type=float, default=0.2, help="Dropout keep probability (default: 0.5)")
       parser.add_argument('--l2_reg_lambda', type=float, default=0.001, help="L2 regularizaion lambda (default: 0.0)")
       parser.add_argument('--sequence_length', type=int, default=18, help="sequence_length (default: 18)")

       # Training parameters
       parser.add_argument('--batch_size', type=int, default=1024, help="Batch Size (default: 64)")
       parser.add_argument('--num_epochs', type=int, default=3, help="Number of training epochs (default: 200)")
       parser.add_argument('--evaluate_every', type=int, default=500, help="Evaluate model on dev set after this many steps (default: 100)")
       parser.add_argument('--checkpoint_every', type=int, default=20, help="Save model after this many steps (default: 100)")


 71
 parser.add_argument('--filter_sizes', type=str, default="3,4,5",help="Comma-separated filter sizes (default: '3,4,5')")
    parser.add_argument('--embedding_dim', type=int, default=100, help="Dimensionality of character embedding (default: 128)")
    parser.add_argument('--num_filters', type=int, default=128, help="Number of filters per filter size (default: 128)")
    parser.add_argument('--dropout_keep_prob', type=float, default=0.3, help="Dropout keep probability (default: 0.5)")
    parser.add_argument('--l2_reg_lambda', type=float, default=0.001, help="L2 regularizaion lambda (default: 0.0)")
    parser.add_argument('--sequence_length', type=int, default=18, help="sequence_length (default: 18)")

    # Training parameters
    parser.add_argument('--batch_size', type=int, default=1024, help="Batch Size (default: 64)")
    parser.add_argument('--num_epochs', type=int, default=3, help="Number of training epochs (default: 200)")
    parser.add_argument('--evaluate_every', type=int, default=500, help="Evaluate model on dev set after this many steps (default: 100)")
    parser.add_argument('--checkpoint_every', type=int, default=20, help="Save model after this many steps (default: 100)")


 72

parser.add_argument('--filter_sizes', type=str, default="3,4,5",help="Comma-separated filter sizes (default: '3,4,5')")
    parser.add_argument('--embedding_dim', type=int, default=100, help="Dimensionality of character embedding (default: 128)")
    parser.add_argument('--num_filters', type=int, default=128, help="Number of filters per filter size (default: 128)")
    parser.add_argument('--dropout_keep_prob', type=float, default=0.4, help="Dropout keep probability (default: 0.5)")
    parser.add_argument('--l2_reg_lambda', type=float, default=0.001, help="L2 regularizaion lambda (default: 0.0)")
    parser.add_argument('--sequence_length', type=int, default=18, help="sequence_length (default: 18)")

    # Training parameters
    parser.add_argument('--batch_size', type=int, default=1024, help="Batch Size (default: 64)")
    parser.add_argument('--num_epochs', type=int, default=3, help="Number of training epochs (default: 200)")
    parser.add_argument('--evaluate_every', type=int, default=500, help="Evaluate model on dev set after this many steps (default: 100)")
    parser.add_argument('--checkpoint_every', type=int, default=20, help="Save model after this many steps (default: 100)")

 73

 parser.add_argument('--filter_sizes', type=str, default="3,4,5",help="Comma-separated filter sizes (default: '3,4,5')")
    parser.add_argument('--embedding_dim', type=int, default=100, help="Dimensionality of character embedding (default: 128)")
    parser.add_argument('--num_filters', type=int, default=128, help="Number of filters per filter size (default: 128)")
    parser.add_argument('--dropout_keep_prob', type=float, default=0.5, help="Dropout keep probability (default: 0.5)")
    parser.add_argument('--l2_reg_lambda', type=float, default=0.001, help="L2 regularizaion lambda (default: 0.0)")
    parser.add_argument('--sequence_length', type=int, default=18, help="sequence_length (default: 18)")

    # Training parameters
    parser.add_argument('--batch_size', type=int, default=1024, help="Batch Size (default: 64)")
    parser.add_argument('--num_epochs', type=int, default=3, help="Number of training epochs (default: 200)")
    parser.add_argument('--evaluate_every', type=int, default=500, help="Evaluate model on dev set after this many steps (default: 100)")
    parser.add_argument('--checkpoint_every', type=int, default=20, help="Save model after this many steps (default: 100)")


    74

    parser.add_argument('--filter_sizes', type=str, default="3,4,5",help="Comma-separated filter sizes (default: '3,4,5')")
    parser.add_argument('--embedding_dim', type=int, default=100, help="Dimensionality of character embedding (default: 128)")
    parser.add_argument('--num_filters', type=int, default=128, help="Number of filters per filter size (default: 128)")
    parser.add_argument('--dropout_keep_prob', type=float, default=0.6, help="Dropout keep probability (default: 0.5)")
    parser.add_argument('--l2_reg_lambda', type=float, default=0.001, help="L2 regularizaion lambda (default: 0.0)")
    parser.add_argument('--sequence_length', type=int, default=18, help="sequence_length (default: 18)")

    # Training parameters
    parser.add_argument('--batch_size', type=int, default=1024, help="Batch Size (default: 64)")
    parser.add_argument('--num_epochs', type=int, default=3, help="Number of training epochs (default: 200)")
    parser.add_argument('--evaluate_every', type=int, default=500, help="Evaluate model on dev set after this many steps (default: 100)")
    parser.add_argument('--checkpoint_every', type=int, default=20, help="Save model after this many steps (default: 100)")


    